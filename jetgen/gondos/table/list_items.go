//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var ListItems = newListItemsTable("gondos", "list_items", "")

type listItemsTable struct {
	mysql.Table

	// Columns
	ID        mysql.ColumnInteger
	ListID    mysql.ColumnInteger
	Body      mysql.ColumnString
	CreatedAt mysql.ColumnTimestamp
	UpdatedAt mysql.ColumnTimestamp

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type ListItemsTable struct {
	listItemsTable

	NEW listItemsTable
}

// AS creates new ListItemsTable with assigned alias
func (a ListItemsTable) AS(alias string) *ListItemsTable {
	return newListItemsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ListItemsTable with assigned schema name
func (a ListItemsTable) FromSchema(schemaName string) *ListItemsTable {
	return newListItemsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ListItemsTable with assigned table prefix
func (a ListItemsTable) WithPrefix(prefix string) *ListItemsTable {
	return newListItemsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ListItemsTable with assigned table suffix
func (a ListItemsTable) WithSuffix(suffix string) *ListItemsTable {
	return newListItemsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newListItemsTable(schemaName, tableName, alias string) *ListItemsTable {
	return &ListItemsTable{
		listItemsTable: newListItemsTableImpl(schemaName, tableName, alias),
		NEW:            newListItemsTableImpl("", "new", ""),
	}
}

func newListItemsTableImpl(schemaName, tableName, alias string) listItemsTable {
	var (
		IDColumn        = mysql.IntegerColumn("id")
		ListIDColumn    = mysql.IntegerColumn("list_id")
		BodyColumn      = mysql.StringColumn("body")
		CreatedAtColumn = mysql.TimestampColumn("created_at")
		UpdatedAtColumn = mysql.TimestampColumn("updated_at")
		allColumns      = mysql.ColumnList{IDColumn, ListIDColumn, BodyColumn, CreatedAtColumn, UpdatedAtColumn}
		mutableColumns  = mysql.ColumnList{ListIDColumn, BodyColumn, CreatedAtColumn, UpdatedAtColumn}
	)

	return listItemsTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:        IDColumn,
		ListID:    ListIDColumn,
		Body:      BodyColumn,
		CreatedAt: CreatedAtColumn,
		UpdatedAt: UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
